1. Строки.

Сгенерировать случайную строку заданной длины
Посчитать кол-во слов в предложении
Посчитать кол-во вхождений символа
Кол-во вхождений каждого символа
Кол-во вхождений подстроки
Найти кол-во полиндромов в предложении и вывести их
Найти какие символы встречаются чаще всего
Развернуть строку
Развернуть слова в предложении
Схлопнуть повторяющиеся символы
Посчитать количество строк в тексте
Перенести каждое предложение на новую строку с отстуом 4 пробела
Перевести русский текст в транслит
Скорректировать регистр у ФИО + вывести инициалы (иванов ИВАН иВаНович -> Иванов Иван Иванович, Иванов И.И.)
Отсортировать слова в строке по алфавиту, вывести в строку и в столбец
Реализовать простой консольный калькулятор (без скобок, операции: +,-,*,/,степень,логирифм,факториал)
Добавить в текст отступы с каждой новой строки 4 пробела
Кол-во вхождений каждого слова
Автоперенос слов на новую строку по заданной максимальной ширине строки

Процентное соотношение вхождений всех символов псевдографикой:
       -      
       -      
       -      -
-      -      -
-      -      -
a(20%) b(50%) c(30%)

Процентное соотношение вхождений всех слов псевдографикой:
  - 
- - 
- - 
в на


2. Регулярные выражения

Проверить, что введенная строка является положительным числом
- целым числом
- десятичным числом
- комплексным числом
- валидным IP-адресом.
- валидным MAC-адресом.
- валидным GUID (e02fd0e4-00fd-090A-ca30-0d00a0038ba0).
Определить степень надежности пароля (цифры, большие и маленькие буквы - надежный, 2 из 3 - слабый, иначе - ненадежный)

Убрать повторяющиеся пробелы
Проверить парность скобок в тексте
Найти сумму всех рациональных чисел в предложении
Найти сумму цифр каждого рационального числа в предложении
Обернуть в квадратные скобки все числа в предложении
Распарсить ax^2+b*x+c, вывести коэффициенты, найти корни
Сократить все слова в предложении, оставив первую и последнюю буквы через дефис
Выделить тегом <strong> все повторяющиеся слова.
Распарсить форматированную дату (HHmmss, ddMMyy, yyyyMMddHHmmss)
Форматировать текущую дату (HHmmss, ddMMyy, yyyyMMddHHmmss)
Заменить в строке шаблон $DATE{ddMMyyyy} на текущую дату в соответствующем формате
Преобразовать текст, обрамленный в звездочки, в курсив (<i></i>), двойные звездочки - жирный (<b></b>)
Преобразовать Markdown список в html
Найти и выделить жирным (<b></b>) повтряющиеся пункты в html-списке.
Распарсить мапу по формату "KEY1=VAL1\nKEY2=VAL2"
Распарсить высокоуровневый astm, достать результаты


3. Коллекции, дженерики

Разбить текст на строки и положить в список
Отсортировать список пузырьком
Реализовать метод сравнения списков с элементами одинакового типа, метод должен возвращать процент схожести
Найти пересечение двух коллекций с элементами одинакового типа
Реализовать метод приведения коллекции к типу с дженериком с проверкой типов элементов: Collection -> Collection<T>
Реализовать универсальный конвертер типов с возможностью добавления пользовательских:
- void addSupportedType(Class<T> type, Function<Object, T> convert) - регистрация функции конвертации для типа type
- T convert(Object value, Class<T> type) - конвертация объекта value в тип type, должна использовать функцию конвертации, зарегистрированную для type
- функции конвертации для часто используемых типов (Integer, String, Boolean) должны быть уже зарегистрированы

Реализовать мапу объектов с методами получения значения требуемого типа - getInt, getString, getDouble, getBool - методы должны не просто кастовать объекты, а преобразовывать их к нужному типу, если это возможно, или выкидывать исключение
Реализовать мапу списков - ListMap<K, V>, K - тип ключа, V - тип элементов списка
Реализовать список MegaList на основе ArrayList с возможностью:
- фильтрации - void filter( <предикат> ) { ... }
- получения нового отфильтрованного списка MegaList filtered( <предикат> ) { ... }
- обхода - void visit( <посетитель> )
- отслеживания изменений списка - addListener( <обрабоичик события изменения списка> )
Реализовать бинарное дерево BinTree, в листьях которого хранятся произвольные объекты, в виде коллекции с дженериком, с возможностью:
- обхода - void visit( <посетитель>)
- поиска по строковому представлению объектов в листьях - BinTreeNode find( <подстрока> ) { ... }
- фильтрации - void filter( <предикат> ) { ... }
- отслеживания изменений - addListener( <обрабоичик события изменения списка> ) { ... }


4. Файлы

Вывести список файлов в заданной папке с их размерами
Посчитать размер папки, количество вложенных файлов, папок и максимальный уровень вложенности
Вывести дерево файлов с корнем в заданной папке
Удалить файлы по маске имени (регулярка)
Скопировать файлы по маске имени, в целевом пути можно использовать regex группы ($1, $2, ...)
Разбить текстовый файл на несколько файлов:
- по 10 строк
- по пустым строкам
- по 1Мб, не разрывая строк
Распаковать/запаковать zip с логгированием обрабатываемых файлов (путь файла в архиве, куда распакован)
Разбить файлы в заданной папке на группы по дате создания и упаковать в архивы 20180730.zip, 20180729.zip, ...
Распаковать все архивы из заданной папки (srcDir) и ее подпапок, положить распакованные файлы в отдельную папку (destDir)
Перекодировать файл из UTF-8 в windows-1251
Снять снимок экрана, сохранить в png
Запустить внешний процесс (bat, explorer, chrome):
- запустить батник
- выделить заданный файл, открыв его папку в explorer
- открыть ссылку в chrome
Реализовать логгер:
- сообщения должны содержать дату и время с миллисекундами, уровень (INFO/WARNING/ERROR) и текст сообщения
- сообщения пишутся в файл с именем "yyyyMMdd.log"
- когда файлы логов начинают занимать больше 5Мб, упаковывать их в zip с именем <мин.дата файла>-<макс.дата файла>
Реализовать grep, который просматривает текст из файла и на выходе показывает лишь те строки, которые содержат подстроку, передаваемую на вход
- вывести путь файла, номер строки и саму строку
- на вход может быть передано регулярное выражение
- на вход может быть передана папка, нужно просмотреть таким же образом все файлы из нее и всех подпапок
Реализовать сериализуемую мапу с форматом "KEY1=VAL1\nKEY2=:VAL2:VAL3:":
- файл задается в конструкторе
- метод load читает файл в мапу, метод save наоборот
- если значение содержит ':', то это список


7. Потоки

Запустить несколько потоков с простыми счетчиками и выводом на экран текущего значения счетчика с заданным интервалом
Реализовать класс потока, выводящего на экран заданный символ каждую секунду заданное количество раз
Добавить метод завершения потока
Запустить потоки в соответствии с графом (при изменении длины потока f должна меняться длина b):
acacadadeeeeefbfb...fbxxx
Реализовать пул объектов (для простоты это может быть простой класс инкапсулирующий строку):
- размер передается в конструктор
- при запросе объекта из пула, он помечается, как занятный и не может быть больше запрошен
- при возврате объекта в пул он освобождается и может быть снова отдан в ответ на запрос
- если свободных объектов нет, запрос должен ждать, пока освободится хотя бы один объект
- если во время ожидания приходит еще один запрос, он становится в очередь и не должен получить объект раньше первого запроса
- запустить несколько потоков, которые рандомно берут объекты из пула выводят их содержимое


5. Сеть

Реализовать простой чат:
- сервер ждет подключения
- клиенты подключаются, при этом всем подключенным клиентам рассылается сообщение ("10.0.0.146 подключился")
- адрес клиента считается дефолтным именем пользователя
- принять от клиента команду im "Andrew", сменить имя пользователя и разослать всем клиентам сообщение ("10.0.0.146 -> Andrew")
- принять от клиента сообщение и переслать всем подключенным клиентам ("Andrew: Сообщение")
- команда im "Andrew" может быть вызвана пользователем в любое время
- при отключении клиента, разослать всем остальным клиентам сообщение ("Andrew отключился")

Реализовать простой обмен данными по заданному протоколу.
Каждое сообщение обрамляется ASCII спец.символами: <STX>Message text<ETX>checksum<CR><LF>
checksum - контрольная сумма текста сообщения (XOR всех символов).
В ответ на сообщение принимающая сторона должна прислать <ACK> или <NAK>,
в зависимости от того, удалось ли прочитать и валидировать сообщение.
В данном задании, положим, что помимо корректной чексуммы, валидное сообщение должно начинаться с большой буквы.
Надо реализовать программу, которая умеет принимать и отправлять сообщения по описанному протоколу,
запустить 2 экземпляра и выполнить обмен между ними.


6. БД

man - таблица с пользователями системы и группами пользователей
* man_type - тип записи: null/0=группа пользователей, 1=пользователь
* status - статус пользователя/группы: null/0=деактивирован, 1=активный
* text - имя пользователя/группы

Достать из БД и вывести в консоль:
* общее количество пользователей
* список всех пользователей
* список активных группы

connector - универсальная таблица связка "многие ко многим",
* linkid - ссылка на первую сущность
* refid - ссылка на вторую сущность
* tag - показывает, ссылка на какую сущность лежит в linkid
* reftag - показывает, ссылка на какую сущность лежит в refid

для связки пользователей с группами используется тэги 1 и 5

Достать из БД и вывести в консоль:
* количество активных и неактивных пользователей по каждой активной группе
* список всех групп, удовлетворяющих строке поиска
** название и статус группы
** ниже с отступом входящие в нее пользователи с указанием статуса, активные вверху, далее по алфавиту

Создать схему в БД - java_tasks_<твой_никнейм>,
оформить все вышеописанные запросы в хранимые процедуры/функции

Реализовать обертку на jdbc для удобного вызова запросов:
- класс Query:
-- Query(Connection conn, String sql)
-- T select(Map<String, Object> params, Function<ResultSet, T> rowExtractor)
-- List<T> selectList(Map<String, Object> params, Function<ResultSet, T> rowExtractor)
-- void update(Map<String, Object> params)

Реализовать класс ManDao, использующий Query,
реализовать все вышеописанные запросы в отдельных методах нового класса.

Достать структуру таблицы из метаданных (ResultSetMetaData): названия колонок, их типы данных
Достать содержимое таблицы man, вывести в консоль с заголовками колонок
Реализовать консольный интерфейс для выполнения запросов к БД (select,insert,delete,update,call)
Восстановить скрипт создания таблицы (только колонки)

Создать таблицу java_tasks_instrument_result для результатов исследований на анализаторах:
- id number(12) - идентификатор записи, первичный ключ
- ids varchar2(24) - идентификатор биоматериала
- measure_code varchar2(32) - код измерения
- measure_value varchar2(32) - полученное значение измерения
- measure_date date - дата измерения
Реализовать интерфейс LabResultsDao:
- saveInstrumentResult(String ids, String msr, String value, Date date) - запись результата в instrument_result
С помощью классов для обмена сообщениями по сети (из раздела 5) передать список пар key+value,
в ключах должны быть имена колонок из таблицы java_tasks_instrument_result, в значениях - собственно их значения,
каждый переданный список надо записать одной записью в таблицу с помощью LabResultsDao.
Сценарий такой
* сервер ждет сообщения от клиента, читает его
* если оно не соответствует формату, возвращает <NAK>
* иначе возвращает <ACK>, парсит и записыват строку в таблицу

---------------------------------------------------------------------------

9. Swing/JavaFX

Задания раздела можно делать на Swing, как написано в условиях,
или JavaFX, используя его аналоги свинговых компонентов,
например Stage вместо JFrame, Alert вместо JOptionPane и т.д.

Генерируется рандомное число [0;100] и пользователю предлагается 7 попыток отгадать, при каждой попытке выводится сообщение - "Мало", "Много" или "В точку":
- JFrame - главное окно приложения
- JTextField для ввода числа (можно вводить только числа от 1 до 100)
- JLabel с сообщением "Мало"/"Много"/"В точку"
- JLabel с количеством оставшихся попыток
- JButton для подтверждения ввода (также должно работать по ENTER в текстовом поле)
- JOptionPane.showConfirmDialog с предложением начать заново в конце игры

Реализовать панель с отрисовкой графиков функций - класс GraphPanel extends JPanel:
- возможность задать одну или несколько отображаемый функций
- возможность задать цвет графика каждой отображаемой функции (по умолчанию - черный)
- возможность задать диапазон графика каждой отображаемой функции (по умолчанию [-10;10] по обеим осям)

Реализовать ColorChooserLabel extends JLabel:
- при клике открывает JColorChooser для выбора цыета
- заливается выбранным цветом (изначально черный)
- отображает код выбранного цвета (#FFFFFF)
- tooltip = "Hex:[FF, FF, FF]\nDec:[255, 255, 255]"

Построить на одной панели графики функций y=ax+b, y=x^2, y=1/x, y=a с возможностью настройки трех параметров каждой из них:
- JFrame - главное окно приложения
- GraphPanel - панель с графиками
- JComboBox - выбор графика (Все, y=ax+b, y=x^2, y=1/x, y=a), если выбран один, остальные графики скрываются
- ColorChooserLabel меняет цвет выбранного графика
- JTextField для ввода диапазона выбранного графика

Подсветка скобок в документе:
- JFrame - главное окно приложения
- JTextPane для отображения документа
- JScrollPane для прокрутки
- моноширинный шрифт
- при установке курсора слева от скобки подсвечивается жирным синим шрифтом она и парная ей
- скобки круглые, фигурные, квадратные, треугольные
- если курсор внутри скобок, то серым фоном выделяется все выражение в скобках
- если в документе обнаружены непарные скобки, они выделяются красным подчеркиванием

Вывести пользователей из таблицы MAN (CODE, TEXT, STATUS, NOTE):
- JFrame - главное окно приложения
- JTable для вывода данных
- JScrollPane для прокрутки
добавить тулбар с кнопками Создать, Удалить, Изменить
добавить диалог создания/редактирования записи по кнопке Создать/Изменить:
- JDialog, заголовок - Создание пользователя/Редактирование пользователя Иванов Иван Иванович
- JTextField для колонок CODE, TEXT
- JPasswordField для колонки PASS
- дублирующее поле для подтверждения пароля
- JCheckBox для колонки STATUS

---------------------------------------------------------------------------

10. Разработка приложения.

Вариант 1. Реализовать картотеку пациентов с возможностью поиска в виде десктопного приложения на Java.

Таблица java_tasks_patient должна содержать следующие колонки (* - обязательные):
*id NUMBER(12) - идентификатор записи
*fio VARCHAR2(256) - ФИО пациента полностью, например "Иванов Иван Иванович"
 birth_date DATE - дата рождения
 sex NUMBER(1) - пол (1=муж, 2=жен)
*num NUMBER(6) - номер карты
 smo VARCHAR2(256) - название страховой компании
 snils VARCHAR2(11)- номер СНИЛС без дефисов (12345678964)
 policy VARCHAR2(20)- номер полиса
 fin_source - источник финансирования (1=ОМС, 2=ДМС, 3=Наличный расчет)

Таблица в интерфейсе должна содержать следующие колонки:
Номер - номер карты
СНИЛС - номер снилс с дефисами (123-456-789-64)
Пол - пол пациента текстом (Муж/Жен)
ФИО - фамилия и инициалы пациента, например "Иванов И.И.", tooltip="Иванов Иван Иванович"
Дата рожд. - дата рождения в формате dd.MM.yyyy
Возраст - возраст пациента текстом, например "29 лет" или "32 года"
Полис - название СМО и номер полиса в одной колонке через дефис, например "РЕСО - 123456"
Ист.фин. - иконка соответствующего источника финансирования (картинки любые)

Другие требования к таблице:
- текст в колонке ФИО выделить жирным шрифтом
- подсветить каждую строки в зависимости от пола пациента, если он заполнен (Муж - голубым, Жен - розовым)
- tooltip в колонке Ист.фин. = "ОМС"/"ДМС"/"Нал" в зависимости от значения в ячейке

Требования к функции поиска:
- на форме должно быть текстовое поле
- при нажатии на кнопку Поиск или ENTER в текстовом поле строки в таблице должны фильтроваться в зависимости от текста
- текст в поле разбивается на слова, запись считается подходящей под критерии, если хотя бы одно слово в колонках содержит хотя бы одно искомое слово
- при нажатии на кнопку Очистить или ESCAPE в текстовом поле, поле поиска должно очищаться, а таблица возвращаться в исходное состояние

Классы должны быть разбиты на основные пакеты:
- ru.spb.reshenie.javatasks.ui (классы окон и компонентов, обращения к БД только через dao)
- ru.spb.reshenie.javatasks.db (классы для работы с базой)
- ru.spb.reshenie.javatasks.entity (бины, не должны содержать никакой логики)
- ru.spb.reshenie.javatasks.utils (утилитные классы)
Приложение должно принимать адрес БД в виде аргумента командной строки - "/url 10.0.0.199:1521:etalon"

Стек:
    IntelliJ IDEA
    Java 8
    интерфейс на Swing/JavaFX
    чистый JDBC, без использования фреймворков (можно пользоваться Query из предыдущих заданий)
    БД - Oracle или PG

Результат выполнения задания:
    maven проект
    исходники
    скомпилированный jar
    батник, запускающий приложение


Вариант 2. Игра жизнь.

Правила игры - https://ru.wikipedia.org/wiki/%D0%98%D0%B3%D1%80%D0%B0_%C2%AB%D0%96%D0%B8%D0%B7%D0%BD%D1%8C%C2%BB
Запускаем приложение - появляется числое поле, слайдер Плотность и кнопка Начать.
Слайдер регулирует плотность наполнения стартового поля,
чем больше значение, тем плотнее будет заполнено поле при старте игры.
По кнопке генерируется рандомная стартовая конфигурация в соответствии с выбранной плотностью и игра ничанается.
По клику на поле в этой точке запускается глайдер (см. стандартные фигуры игры в статье)

Стек:
    IntelliJ IDEA
    Java 8
    интерфейс на JavaFX

Результат выполнения задания:
    maven проект
    исходники
    скомпилированный jar
    батник, запускающий приложение


Вариант 3. Редактор mp3 тэгов.

В приложении должно быть дерево каталогов и файлов (отображаются только *.mp3)
По клику на файл в соседней форме открывается список зашитых в него тэгов.
Тэги моно поменять и нажать Сохранить.
Версия тэгов любая, достаточно ID3v1, не обязательно поддерживать расширенные версии.

Стек:
    IntelliJ IDEA
    Java 8
    интерфейс на Swing или JavaFX

Результат выполнения задания:
    maven проект
    исходники
    скомпилированный jar
    батник, запускающий приложение

